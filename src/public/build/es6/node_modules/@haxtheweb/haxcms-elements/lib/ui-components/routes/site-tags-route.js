/**
 * Copyright 2022 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html as t,css as s,nothing as e}from"../../../../../lit/index.js";import{store as a}from"../../core/haxcms-site-store.js";import{HAXCMSI18NMixin as i}from"../../core/utils/HAXCMSI18NMixin.js";import{toJS as r}from"../../../../../mobx/dist/mobx.esm.js";import{DDD as l}from"../../../../d-d-d/d-d-d.js";import"../../../../collection-list/collection-list.js";import"../../../../collection-list/lib/collection-item.js";import"../../../../simple-fields/lib/simple-tag.js";export class SiteTagsRoute extends(i(l)){static get tag(){return"site-tags-route"}static get styles(){return[super.styles,s`
        :host {
          display: block;
          font-size: 16px;
        }

        simple-tag {
          margin: 0 4px 4px 0;
          cursor: pointer;
        }

        .all-tags {
          display: block;
        }        
      `]}constructor(){super(),this.HAXCMSI18NMixinBase="../../../",this.search=globalThis.location.search,this.t.tags="Tags",this.filteredItems=[],this.resultsTags={},this.params={}}_tagClick(t){let s=t.target.value;const e=new URLSearchParams(this.search);e.set("tag",s.trim()),globalThis.history.replaceState({},"",decodeURIComponent(`./x/tags?${e}`)),this.search=globalThis.location.search}_resetClick(t){const s=new URLSearchParams(this.search);s.delete("tag"),globalThis.history.replaceState({},"",decodeURIComponent(`./x/tags?${s}`)),this.search=globalThis.location.search}render(){return t`
    ${this.params&&this.params.tag?t`<simple-tag class="all-tags" value="Remove '${this.params.tag}' filter" @click="${this._resetClick}"></simple-tag>`:e}
    ${Object.keys(this.resultsTags).map((s=>t`
      ${this.params.tag===s.trim()?e:t`
      <simple-tag auto-accent-color
        value="${s.trim()}"
        @click="${this._tagClick}"
      >${this.resultsTags[s]>1?t` (${this.resultsTags[s]})`:e}</simple-tag>
      `}
    `))}
    <collection-list>
    ${this.filteredItems.map((s=>t`
      <collection-item
        line1="${s.title}"
        line2="${s.description}"
        url="${s.slug}"
        image="${s.metadata.image}"
        tags="${s.metadata.tags}"
        icon="${s.metadata.icon}"
        accent-color="${s.metadata.accentColor}"></collection-item>
    `))}
    </collection-list>`}updated(t){super.updated&&super.updated(t),t.forEach(((t,s)=>{if("search"===s&&this.search){const t=new URLSearchParams(this.search),s=Object.fromEntries(t);this.params={},this.params=s,s.display||(t.set("display",this.params.display||"card"),globalThis.history.replaceState({},"",decodeURIComponent(`./x/tags?${t}`)))}"params"===s&&a.manifest.items&&(this.filteredItems=[...r(a.manifest.items).filter((t=>!this.params.tag||t.metadata.tags&&t.metadata.tags.split(",").some((t=>t.toLowerCase().includes(this.params.tag.toLowerCase())))))]),"filteredItems"===s&&this.updateResultsTags(this.filteredItems)}))}async updateResultsTags(t){let s=[];await t.forEach((async t=>{if(t.metadata.tags){const e=t.metadata.tags.trim().split(",");s.push(...e)}})),this.resultsTags={...this.countDuplicates(s)}}countDuplicates(t){const s={};for(const e of t)s[e]=(s[e]||0)+1;return s}static get properties(){return{...super.properties,search:{type:String},params:{type:Object},filteredItems:{type:Array},resultsTags:{type:Object}}}}globalThis.customElements.define(SiteTagsRoute.tag,SiteTagsRoute);